services:
  # --- Banco de Dados do Serviço de Usuário ---
  user-db:
    image: postgres:15-alpine
    container_name: user_service_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${USER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_DB_PASSWORD}
      POSTGRES_DB: ${USER_SERVICE_DB_NAME}
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - tcg_network

  # --- Microsserviço de Usuário ---
  user-api:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user_service_api
    ports:
      - "8001:80"
    environment:
      DATABASE_URL: "postgresql://${USER_SERVICE_DB_USER}:${USER_SERVICE_DB_PASSWORD}@user-db:5432/${USER_SERVICE_DB_NAME}"
    depends_on:
      - user-db
    networks:
      - tcg_network

  # --- Outros serviços de backend (card, deck) seguiriam o mesmo padrão ---
  # card-db:
  #   ...
  # card-api:
  #   build:
  #     context: ./backend/card_service
  #   ...

  # --- Frontend React ---
  frontend-ui:
    build:
      context: ./frontend/nameless-ui
      dockerfile: Dockerfile
    container_name: frontend_ui
    ports:
      - "3000:80" # Expõe o Nginx do container na porta 3000 da sua máquina
    networks:
      - tcg_network

# Definição dos volumes para persistência de dados
volumes:
  user_db_data:
  # card_db_data:

# Definição da rede para comunicação entre os contêineres
networks:
  tcg_network:
    driver: bridge